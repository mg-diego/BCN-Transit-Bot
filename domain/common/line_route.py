from collections import defaultdict
from dataclasses import dataclass
from datetime import datetime
from typing import List, Optional
import html

from domain import NextTrip
from domain.transport_type import TransportType

@dataclass
class LineRoute:
    route_id: str
    line_type: TransportType
    name: str
    color: str
    destination: str
    next_trips: List[NextTrip]
    name_with_emoji: Optional[str] = ""
    line_id: Optional[str] = ""
    line_name: Optional[str] = ""

    def __post_init__(self):
        if self.line_type == TransportType.METRO:
            emojis = {
                "L1": "üü•",
                "L2": "üü™",
                "L3": "üü©",
                "L4": "üü®",
                "L5": "üü¶",
                "L9S": "üüß",
                "L9N": "üüß",
            }
        elif self.line_type == TransportType.TRAM:
            emojis = {
                "T1": "üü©",
                "T2": "üü©",
                "T3": "üü©",
                "T4": "üü©",
                "T5": "üü©",
                "T6": "üü©"
            }
        elif self.line_type == TransportType.BUS:
            emojis = {
                "H": "üü¶",
                "D": "üü™",
                "V": "üü©",
                "M": "üî¥",
                "X": "üü®"
            }
            for letter in self.name:
                if letter in emojis:
                    self.name_with_emoji = f"{emojis[letter]} {self.name}"
                    break
            else:
                if self.name.isdigit():
                    self.name_with_emoji = f"üî¥ {self.name}"
            return
        elif self.line_type == TransportType.FGC:
            emojis = {
                #Barcelona ‚Äì Vall√©s
                "L1": "üü•",
                "S1": "üü•",
                "S2": "üü©",
                "L6": "üü™",
                "L7": "üü´",
                "L12": "üü™",

                #Llobregat ‚Äì Anoia
                "L8": "üü™",
                "S3": "üü¶",
                "S4": "üü®",
                "S8": "üü¶",
                "S9": "üü•",
                "R5": "üü¶",
                "R50": "üü¶",
                "R6": "‚¨õ",
                "R60": "‚¨õ",

                #Lleida ‚Äì La Pobla de Segur
                "RL1": "üü©",
                "RL2": "üü©"
            }
        elif self.line_type == TransportType.RODALIES:
            emojis = {
                "R1": "üü¶", "R2": "üü©", "R2 Nord": "üü©", "R2 Sud": "üü©",
                "R3": "üü•", "R4": "üü®", "R7": "‚¨ú", "R8": "üü™",
                "R11": "üü¶", "R13": "‚¨õ", "R14": "üü™", "R15": "üü´",
                "R16": "üü•", "R17": "üüß", "RG1": "üü¶", "RT1": "üü¶",
                "RT2": "‚¨ú", "RL3": "üü©", "RL4": "üü®",
            }

        emoji = emojis.get(self.name, "")
        self.name_with_emoji = f"{emoji} {self.name}"

    @staticmethod
    def simple_list(route, arriving_threshold=40) -> str:
        header = f"     <b>{route.name_with_emoji} ‚Üí {html.escape(route.destination)}</b>"

        number_emojis = ["1Ô∏è‚É£", "2Ô∏è‚É£", "3Ô∏è‚É£", "4Ô∏è‚É£", "5Ô∏è‚É£"]

        tren_info = "\n".join(
            f"           <i>{number_emojis[i] if i < len(number_emojis) else f'{i+1}.'} {trip.remaining_time(arriving_threshold)}</i>"
            for i, trip in enumerate(route.next_trips[:5])
        )
        
        return f"{header}\n{tren_info}"
    @staticmethod
    def grouped_list(routes) -> str:
        """Genera un string agrupado por line_name para varias rutas."""
        number_emojis = ["1Ô∏è‚É£", "2Ô∏è‚É£", "3Ô∏è‚É£", "4Ô∏è‚É£", "5Ô∏è‚É£"]

        grouped_routes = defaultdict(list)
        for route in routes:
            grouped_routes[route.name_with_emoji].append(route)

        lines = []
        for routes in grouped_routes.values():
            for route in routes:
                header = f"     <b>lroute.name_with_emoji ‚Üí {html.escape(route.destination)}</b>"
                tram_info = "\n".join(
                    f"           <i>{number_emojis[i] if i < len(number_emojis) else f'{i+1}.'} {tram.remaining_time()}</i>"
                    for i, tram in enumerate(route.next_trips[:5])
                )
                lines.append(f"{header}\n{tram_info}")
            lines.append("\n")

        return "\n".join(lines)
    
    @staticmethod
    def scheduled_list(route):
        header = f"     <b>{route.name_with_emoji} ‚Üí {html.escape(route.destination)}</b>"
        number_emojis = ["1Ô∏è‚É£", "2Ô∏è‚É£", "3Ô∏è‚É£", "4Ô∏è‚É£", "5Ô∏è‚É£"]

        trips_info = []
        for i, trip in enumerate(route.next_trips[:3]):
            number_emoji = number_emojis[i] if i < len(number_emojis) else f"{i + 1}."

            # V√≠a y n√∫mero de tren si existen
            via_text = f" | V√≠a {trip.platform} ¬∑ {trip.id}" if trip.platform else ""

            # Horas programada y estimada
            scheduled_time = trip.scheduled_arrival()
            scheduled = scheduled_time.strftime("%H:%M") if scheduled_time else "?"
            estimated = (
                datetime.fromtimestamp(trip.arrival_time).strftime("%H:%M")
                if trip.arrival_time
                else "?"
            )

            # Retraso
            delay_text = ""
            if trip.delay_in_minutes is not None:
                if trip.delay_in_minutes > 0:
                    if trip.delay_in_minutes >= 15:
                        delay_text = f"(+{trip.delay_in_minutes}m‚ÄºÔ∏è)"
                    else:
                        delay_text = f"(+{trip.delay_in_minutes}m‚ùó)"
                elif trip.delay_in_minutes < 0:
                    delay_text = f"({trip.delay_in_minutes}m ‚è™)"

            # Tiempo restante
            remaining = trip.remaining_time()

            # Si la hora programada ya est√° incluida en remaining y no hay retraso ‚Üí mostrar versi√≥n simple
            if scheduled in remaining and delay_text == "":
                trips_info.append(
                    f"           <i>{number_emoji} {remaining}{via_text}</i>"
                )
            else:
                trips_info.append(
                    f"           <i>{number_emoji} {remaining}{via_text}</i>\n"
                    f"                ‚è∞ {scheduled}"
                    f"{'' if delay_text == '' else f' ‚Üí {estimated} {delay_text}'}"
                )

        return f"{header}\n" + "\n".join(trips_info)